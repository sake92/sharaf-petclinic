package ba.sake.sharaf.petclinic.web.controllers

import ba.sake.validson.*
import ba.sake.sharaf.*, routing.*
import ba.sake.sharaf.petclinic.domain.models.*
import ba.sake.sharaf.petclinic.domain.services.*
import ba.sake.sharaf.petclinic.web.views.ViewsFactory
import ba.sake.sharaf.petclinic.web.models.*

class OwnerController(ownerService: OwnerService) extends PetclinicController {

  override def routes = Routes:

    case GET() -> Path("owners", "find") =>
      Response.withBody(ViewsFactory.findOwners())

    case GET() -> Path("owners") =>
      val qp = Request.current.queryParamsValidated[FindOwnerQP]
      val pageRes = ownerService.findByLastName(qp.p, qp.q.getOrElse(""))
      Response.withBody(ViewsFactory.owners(qp, pageRes))

    case GET() -> Path("owners", param[Int](ownerId)) =>
      val ownerOpt = ownerService.findById(ownerId)
      val htmlPageOpt = ownerOpt.map(o => ViewsFactory.ownerDetails(o))
      Response.withBodyOpt(htmlPageOpt, "Owner")

    case GET() -> Path("owners", "new") =>
      Response.withBody(ViewsFactory.newOwner(UpsertOwnerForm.empty, Seq.empty))

    case POST() -> Path("owners", "new") =>
      val formData = Request.current.bodyForm[UpsertOwnerForm]
      formData.validate match
        case Seq() =>
          // dummy id -1, it gets autogenerated in db..
          var newOwner =
            Owner(-1, formData.firstName, formData.lastName, formData.address, formData.city, formData.telephone)
          newOwner = ownerService.insert(newOwner)
          Response.redirect(s"/owners/${newOwner.id}")
        case errors =>
          val htmlPage = ViewsFactory.newOwner(formData, errors)
          Response.withBody(htmlPage).withStatus(400)

  //  case GET() -> Path("owners", param[Int](ownerId), "edit") =>
  //  Response.withBody(ViewsFactory.editOwner())

}
